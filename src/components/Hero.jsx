import React, { useEffect, useState, useRef } from 'react';import { motion } from 'framer-motion';import { FiArrowRight } from 'react-icons/fi';import styles from '../styles/Hero.module.css';const containerVariants = {  hidden: { opacity: 0 },  visible: {    opacity: 1,    transition: {      staggerChildren: 0.2,      delayChildren: 0.3,    },  },};const itemVariants = {  hidden: { y: 30, opacity: 0 },  visible: {    y: 0,    opacity: 1,    transition: {      duration: 0.6,      ease: [0.16, 1, 0.3, 1],    },  },};const buttonVariants = {  hover: {    scale: 1.05,    boxShadow: '0 12px 30px rgba(123, 97, 255, 0.5)',    transition: {      duration: 0.4,    },  },  tap: {    scale: 0.98,  },};const Hero = () => {  const [typedName, setTypedName] = useState('');  const [showCursor, setShowCursor] = useState(true);  const [isTypingComplete, setIsTypingComplete] = useState(false);  const heroRef = useRef(null);  const fullName = "Extacia Fakero";  const nameLetters = fullName.split('');  const scrollToProjects = () => {    const section = document.querySelector('#projects');    if (section) {      section.scrollIntoView({ behavior: 'smooth' });    }  };  useEffect(() => {    // Create data stream particles    const container = heroRef.current;    const streamContainer = document.createElement('div');    streamContainer.className = styles.dataStream;    for (let i = 0; i < 80; i++) {      const particle = document.createElement('div');      particle.className = styles.dataParticle;      particle.style.left = `${Math.random() * 100}%`;      particle.style.top = `${-Math.random() * 20}px`;      particle.style.width = `${1 + Math.random() * 3}px`;      particle.style.height = particle.style.width;      particle.style.animationDuration = `${3 + Math.random() * 7}s`;      particle.style.animationDelay = `${Math.random() * 5}s`;      particle.style.opacity = `${0.3 + Math.random() * 0.5}`;      streamContainer.appendChild(particle);    }    container.appendChild(streamContainer);    // Typing animation for name    let i = 0;    const typingInterval = setInterval(() => {      if (i < fullName.length) {        setTypedName(fullName.substring(0, i + 1));        i++;      } else {        clearInterval(typingInterval);        setIsTypingComplete(true);        // Blinking cursor effect after typing completes        const cursorInterval = setInterval(() => {          setShowCursor(prev => !prev);        }, 800);        return () => clearInterval(cursorInterval);      }    }, 120);    return () => {      container.removeChild(streamContainer);      clearInterval(typingInterval);    };  }, []);  return (    <section id="home" className={styles.hero} aria-label="Hero section" ref={heroRef}>      {/* Quantum orbs */}      <div className={styles.quantumOrb} />      <div className={styles.quantumOrb} />      <motion.div        className={styles.heroContainer}        initial="hidden"        animate="visible"        variants={containerVariants}      >        <motion.h1 className={styles.heroTitle} variants={itemVariants} tabIndex={0}>          Hi, I'm{' '}          <span className={styles.typingContainer}>            <span className={styles.typingText}>              <span className={styles.nameHighlight}>                {typedName}                {showCursor && !isTypingComplete && (                  <span className={styles.typingCursor} />                )}              </span>            </span>            {isTypingComplete && (              <motion.span                className={styles.nameUnderline}                initial={{ scaleX: 0 }}                animate={{ scaleX: 1 }}                transition={{ duration: 0.8, ease: [0.16, 1, 0.3, 1] }}              />            )}          </span>        </motion.h1>        <motion.h2 className={styles.heroSubtitle} variants={itemVariants} tabIndex={0}>          üë®‚Äçüíª Quantum Computing Specialist ‚Ä¢ üß† Neural Network Architect ‚Ä¢ ‚öôÔ∏è Full-Stack Engineer          <br />          Transforming complex algorithms into elegant solutions through cutting-edge technology.        </motion.h2>        <motion.div variants={itemVariants}>          <motion.button            className={styles.heroButton}            variants={buttonVariants}            whileHover="hover"            whileTap="tap"            aria-label="View my work"            onClick={scrollToProjects}          >            Explore My Work <FiArrowRight className={styles.arrowIcon} />          </motion.button>        </motion.div>        <div className={styles.scrollIndicator} aria-hidden="true">          <div className={styles.mouse}>            <div className={styles.scroller}></div>          </div>          <p>Scroll to discover</p>        </div>      </motion.div>    </section>  );};export default Hero;