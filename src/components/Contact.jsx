import React, { useState, useRef, useEffect } from 'react';import { motion, AnimatePresence } from 'framer-motion';import {  FiUser, FiMail, FiMessageSquare, FiPaperclip, FiSend,  FiPhone, FiMapPin, FiLinkedin, FiGithub, FiX, FiCheck} from 'react-icons/fi';import styles from '../styles/Contact.module.css';const Contact = () => {  const [formData, setFormData] = useState({    name: '',    email: '',    message: '',    file: null  });  const [errors, setErrors] = useState({});  const [isSubmitting, setIsSubmitting] = useState(false);  const [submitSuccess, setSubmitSuccess] = useState(false);  const [characterCount, setCharacterCount] = useState(0);  const fileInputRef = useRef(null);  const formRef = useRef(null);  const MAX_MESSAGE_LENGTH = 500;  // Your contact details  const contactInfo = {    phone: '+263 717394668/+263780656926',    email: 'extaciafakero@gmail.com',    location: 'GreenCourt Darwendale, ZW',    linkedin: 'extacia-fakero-268675223',    github: 'Extacia21'  };  useEffect(() => {    const timer = setTimeout(() => {      if (formRef.current) {        formRef.current.style.opacity = 1;        formRef.current.style.transform = 'translateY(0)';      }    }, 100);    return () => clearTimeout(timer);  }, []);  const validateForm = () => {    const newErrors = {};    if (!formData.name.trim()) {      newErrors.name = 'Name is required';    } else if (formData.name.length < 2) {      newErrors.name = 'Name must be at least 2 characters';    }    if (!formData.email.trim()) {      newErrors.email = 'Email is required';    } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formData.email)) {      newErrors.email = 'Please enter a valid email address';    }    if (!formData.message.trim()) {      newErrors.message = 'Message is required';    } else if (formData.message.length < 10) {      newErrors.message = 'Message must be at least 10 characters';    } else if (formData.message.length > MAX_MESSAGE_LENGTH) {      newErrors.message = `Message must be less than ${MAX_MESSAGE_LENGTH} characters`;    }    if (formData.file) {      const validTypes = ['image/jpeg', 'image/png', 'application/pdf'];      if (formData.file.size > 5 * 1024 * 1024) {        newErrors.file = 'File size must be less than 5MB';      } else if (!validTypes.includes(formData.file.type)) {        newErrors.file = 'Only JPEG, PNG, or PDF files are allowed';      }    }    setErrors(newErrors);    return Object.keys(newErrors).length === 0;  };  const handleChange = (e) => {    const { name, value } = e.target;    if (name === 'message') {      setCharacterCount(value.length);    }    setFormData(prev => ({      ...prev,      [name]: value    }));    if (errors[name]) {      setErrors(prev => ({        ...prev,        [name]: ''      }));    }  };  const handleFileChange = (e) => {    const file = e.target.files[0];    if (file) {      setFormData(prev => ({        ...prev,        file      }));      if (errors.file) {        setErrors(prev => ({          ...prev,          file: ''        }));      }    }  };  const removeFile = () => {    setFormData(prev => ({      ...prev,      file: null    }));    if (fileInputRef.current) {      fileInputRef.current.value = '';    }  };  const handleSubmit = async (e) => {    e.preventDefault();    if (!validateForm()) {      formRef.current.style.animation = 'none';      setTimeout(() => {        formRef.current.style.animation = 'shake 0.5s ease-in-out';      }, 10);      return;    }    setIsSubmitting(true);    try {      // Simulate API call      await new Promise(resolve => setTimeout(resolve, 1500));      setSubmitSuccess(true);      setFormData({        name: '',        email: '',        message: '',        file: null      });      setCharacterCount(0);      if (fileInputRef.current) {        fileInputRef.current.value = '';      }      setTimeout(() => {        setSubmitSuccess(false);      }, 5000);    } catch (error) {      setErrors({        submit: 'There was an error submitting your message. Please try again.'      });    } finally {      setIsSubmitting(false);    }  };  return (    <section id="contact" className={styles.contactSection}>      <div className={styles.particleBackground} id="particles-js"></div>      <div className={styles.contactContainer}>        {/* Contact Information Card */}        <motion.div          className={styles.contactInfoCard}          initial={{ opacity: 0, x: -40 }}          animate={{ opacity: 1, x: 0 }}          transition={{ duration: 0.6, delay: 0.2 }}          whileHover={{ y: -5 }}        >          <div className={styles.cardHeader}>            <motion.div              className={styles.cardIcon}              whileHover={{ rotate: 15, scale: 1.1 }}            >              <FiMail size={24} />            </motion.div>            <h2 className={styles.sectionTitle}>Contact Information</h2>          </div>          <p className={styles.sectionSubtitle}>Let's build something amazing together</p>          <div className={styles.contactDetails}>            <motion.div              className={styles.contactItem}              whileHover={{ x: 5 }}              transition={{ type: 'spring', stiffness: 300 }}            >              <div className={styles.contactIconContainer}>                <FiPhone className={styles.contactIcon} />              </div>              <div className={styles.contactText}>                <h3 className={styles.contactLabel}>Phone</h3>                <a href={`tel:${contactInfo.phone}`} className={styles.contactLink}>                  {contactInfo.phone}                </a>              </div>            </motion.div>            <motion.div              className={styles.contactItem}              whileHover={{ x: 5 }}              transition={{ type: 'spring', stiffness: 300 }}            >              <div className={styles.contactIconContainer}>                <FiMail className={styles.contactIcon} />              </div>              <div className={styles.contactText}>                <h3 className={styles.contactLabel}>Email</h3>                <a href={`mailto:${contactInfo.email}`} className={styles.contactLink}>                  {contactInfo.email}                </a>              </div>            </motion.div>            <motion.div              className={styles.contactItem}              whileHover={{ x: 5 }}              transition={{ type: 'spring', stiffness: 300 }}            >              <div className={styles.contactIconContainer}>                <FiMapPin className={styles.contactIcon} />              </div>              <div className={styles.contactText}>                <h3 className={styles.contactLabel}>Location</h3>                <p className={styles.contactTextContent}>{contactInfo.location}</p>              </div>            </motion.div>          </div>          <div className={styles.socialLinks}>            <motion.a              whileHover={{ y: -3, scale: 1.05 }}              whileTap={{ scale: 0.95 }}              href={`https://linkedin.com/in/${contactInfo.linkedin}`}              className={styles.socialLink}              target="_blank"              rel="noopener noreferrer"            >              <FiLinkedin className={styles.socialIcon} />              <span>LinkedIn</span>            </motion.a>            <motion.a              whileHover={{ y: -3, scale: 1.05 }}              whileTap={{ scale: 0.95 }}              href={`https://github.com/${contactInfo.github}`}              className={styles.socialLink}              target="_blank"              rel="noopener noreferrer"            >              <FiGithub className={styles.socialIcon} />              <span>GitHub</span>            </motion.a>          </div>        </motion.div>        {/* Contact Form Card */}        <motion.div          className={styles.contactFormCard}          ref={formRef}          initial={{ opacity: 0, y: 40 }}          animate={{ opacity: 1, y: 0 }}          transition={{ duration: 0.6, ease: "easeOut" }}          whileHover={{ y: -5 }}        >          <div className={styles.cardHeader}>            <motion.div              className={styles.cardIcon}              whileHover={{ rotate: -15, scale: 1.1 }}            >              <FiMessageSquare size={24} />            </motion.div>            <h2 className={styles.sectionTitle}>Send a Message</h2>          </div>          <form onSubmit={handleSubmit} className={styles.contactForm} noValidate>            {/* Name Field with Floating Label */}            <div className={styles.formGroup}>              <motion.div                className={styles.inputContainer}                whileFocus={{ scale: 1.02 }}              >                <FiUser className={styles.inputIcon} />                <input                  type="text"                  id="name"                  name="name"                  value={formData.name}                  onChange={handleChange}                  className={styles.formInput}                  disabled={isSubmitting}                  required                  placeholder=" "                />                <label htmlFor="name" className={styles.floatingLabel}>Your Name</label>              </motion.div>              {errors.name && (                <motion.p                  className={styles.errorMessage}                  initial={{ opacity: 0, y: -10 }}                  animate={{ opacity: 1, y: 0 }}                >                  <FiX size={14} /> {errors.name}                </motion.p>              )}            </div>            {/* Email Field with Floating Label */}            <div className={styles.formGroup}>              <motion.div                className={styles.inputContainer}                whileFocus={{ scale: 1.02 }}              >                <FiMail className={styles.inputIcon} />                <input                  type="email"                  id="email"                  name="email"                  value={formData.email}                  onChange={handleChange}                  className={styles.formInput}                  disabled={isSubmitting}                  required                  placeholder=" "                />                <label htmlFor="email" className={styles.floatingLabel}>Your Email</label>              </motion.div>              {errors.email && (                <motion.p                  className={styles.errorMessage}                  initial={{ opacity: 0, y: -10 }}                  animate={{ opacity: 1, y: 0 }}                >                  <FiX size={14} /> {errors.email}                </motion.p>              )}            </div>            {/* Message Field with Floating Label and Character Count */}            <div className={styles.formGroup}>              <motion.div                className={styles.inputContainer}                whileFocus={{ scale: 1.02 }}              >                <FiMessageSquare className={styles.inputIcon} />                <textarea                  id="message"                  name="message"                  value={formData.message}                  onChange={handleChange}                  className={styles.formInput}                  disabled={isSubmitting}                  required                  maxLength={MAX_MESSAGE_LENGTH}                  placeholder=" "                />                <label htmlFor="message" className={styles.floatingLabel}>Your Message</label>                <span className={styles.charCount}>{characterCount}/{MAX_MESSAGE_LENGTH}</span>              </motion.div>              {errors.message && (                <motion.p                  className={styles.errorMessage}                  initial={{ opacity: 0, y: -10 }}                  animate={{ opacity: 1, y: 0 }}                >                  <FiX size={14} /> {errors.message}                </motion.p>              )}            </div>{/* File Upload with Preview */}<div className={styles.formGroup}>  <label className={styles.formLabel}>Attachment</label>  <motion.div    className={styles.fileUploadArea}    whileHover={{ borderColor: "#6366f1" }}  >    <input      type="file"      id="file-upload"      ref={fileInputRef}      onChange={handleFileChange}      className={styles.fileInput}      disabled={isSubmitting}    />    {!formData.file ? (      <motion.label        htmlFor="file-upload"        className={styles.fileUploadLabel}        whileHover={{ scale: 1.02 }}        whileTap={{ scale: 0.98 }}      >        <FiPaperclip className={styles.fileUploadIcon} />        <span>Drag & drop files or click to browse</span>        <small>Max 5MB (JPEG, PNG, PDF)</small>      </motion.label>    ) : (      <div className={styles.filePreview}>        <span>{formData.file.name}</span>        <motion.button          type="button"          onClick={removeFile}          className={styles.fileRemoveButton}          whileHover={{ scale: 1.1 }}          whileTap={{ scale: 0.9 }}        >          <FiX />        </motion.button>      </div>    )}  </motion.div>  {errors.file && (    <motion.p      className={styles.errorMessage}      initial={{ opacity: 0, y: -10 }}      animate={{ opacity: 1, y: 0 }}    >      <FiX size={14} /> {errors.file}    </motion.p>  )}</div>            {/* Submit Button */}            <motion.button              type="submit"              className={styles.submitButton}              disabled={isSubmitting}              whileHover={{ scale: 1.02 }}              whileTap={{ scale: 0.98 }}            >              {isSubmitting ? (                <>                  <motion.span                    className={styles.loadingSpinner}                    animate={{ rotate: 360 }}                    transition={{ repeat: Infinity, duration: 1, ease: "linear" }}                  />                  Processing...                </>              ) : (                <>                  <FiSend className={styles.buttonIcon} />                  Send Message                  <span className={styles.buttonEffect}></span>                </>              )}            </motion.button>            {/* Success Message */}            <AnimatePresence>              {submitSuccess && (                <motion.div                  className={styles.successMessage}                  initial={{ opacity: 0, height: 0 }}                  animate={{ opacity: 1, height: 'auto' }}                  exit={{ opacity: 0, height: 0 }}                >                  <div className={styles.successIcon}>                    <FiCheck size={24} />                  </div>                  <div>                    <h3 className={styles.successTitle}>Message Sent!</h3>                    <p className={styles.successText}>                      Thank you, {formData.name}! I'll respond within 24 hours.                    </p>                  </div>                </motion.div>              )}            </AnimatePresence>          </form>        </motion.div>      </div>    </section>  );};export default Contact;