import React, { useState, useEffect } from 'react';import { motion } from 'framer-motion';import { skills } from '../data/skills';import styles from '../styles/Skills.module.css';const languageAliases = {  'react': ['javascript', 'typescript', 'jsx', 'tsx'],  'node.js': ['javascript', 'typescript'],  'javascript': ['javascript'],  'html5': ['html'],  'tailwind css': ['css'],  'git': [],  'python': ['python'],  'java': ['java']};const containerVariants = {  hidden: { opacity: 0 },  visible: {    opacity: 1,    transition: {      staggerChildren: 0.1,      delayChildren: 0.3    }  }};const skillVariants = {  hidden: { opacity: 0, y: 30 },  visible: {    opacity: 1,    y: 0,    transition: {      duration: 0.6,      ease: 'easeOut'    }  },  hover: {    y: -10,    boxShadow: '0 15px 30px rgba(127, 90, 240, 0.3)'  }};const Skills = () => {  const [githubStats, setGithubStats] = useState({});  const [isLoading, setIsLoading] = useState(true);  const [error, setError] = useState(null);  useEffect(() => {    const fetchGitHubData = async () => {      try {        setIsLoading(true);        const response = await fetch('https://api.github.com/users/Extacia21/repos', {          headers: {            Authorization: `token ${process.env.REACT_APP_GITHUB_TOKEN}`          }        });        if (!response.ok) throw new Error('GitHub API request failed');        const repos = await response.json();        const languageStats = {};        let totalBytes = 0;        await Promise.all(repos.map(async repo => {          const langResponse = await fetch(repo.languages_url, {            headers: {              Authorization: `token ${process.env.REACT_APP_GITHUB_TOKEN}`            }          });          if (langResponse.ok) {            const langs = await langResponse.json();            Object.entries(langs).forEach(([lang, bytes]) => {              const normalizedLang = lang.toLowerCase();              languageStats[normalizedLang] = (languageStats[normalizedLang] || 0) + bytes;              totalBytes += bytes;            });          }        }));        const updatedStats = {};        skills.forEach(skill => {          const skillName = skill.name.toLowerCase();          const aliases = languageAliases[skillName] || [skillName];          let skillBytes = 0;          aliases.forEach(alias => {            if (languageStats[alias]) {              skillBytes += languageStats[alias];            }          });          const percentage = totalBytes > 0            ? Math.min(100, Math.round((skillBytes / totalBytes) * 100 * 2.5))            : 0;          updatedStats[skill.id] = percentage;        });        setGithubStats(updatedStats);        setError(null);      } catch (err) {        console.error("GitHub API error:", err);        setError("Couldn't load GitHub data. Showing default proficiencies.");      } finally {        setIsLoading(false);      }    };    fetchGitHubData();  }, []);  return (    <section id="skills" className={styles.skillsSection} aria-label="Technical skills section">      <motion.div        className={styles.skillsContainer}        initial="hidden"        animate="visible"        variants={containerVariants}      >        <motion.div className={styles.sectionHeader} variants={skillVariants}>          <h2 className={styles.sectionTitle}>Technical Skills</h2>          <p className={styles.sectionSubtitle}>            {isLoading ? "Analyzing my GitHub activity..." :             error ? error : "Real-time analysis of my code"}          </p>          <div className={styles.divider}></div>        </motion.div>        {isLoading ? (          <div className={styles.loadingState}>            <div className={styles.loadingSpinner}></div>            <p>Calculating skill levels from GitHub...</p>          </div>        ) : (          <div className={styles.skillsGrid}>            {skills.map((skill) => (              <motion.div                key={skill.id}                className={styles.skillCard}                variants={skillVariants}                whileHover="hover"              >                <div className={styles.skillIconContainer}>                  <div className={`${styles.skillIcon} ${skill.color}`}>                    <skill.icon />                  </div>                  <div className={styles.skillPulse}></div>                </div>                <h3 className={styles.skillName}>{skill.name}</h3>                <div className={styles.skillProgress}>                  <motion.div                    className={styles.progressBar}                    style={{ backgroundColor: skill.color.replace('text-', 'bg-') }}                    initial={{ width: 0 }}                    animate={{                      width: `${githubStats[skill.id] || 0}%`                    }}                    transition={{ duration: 1.5, delay: 0.3 }}                  ></motion.div>                </div>                <span className={styles.proficiencyText}>                  {githubStats[skill.id] || 0}%                </span>              </motion.div>            ))}          </div>        )}      </motion.div>    </section>  );};export default Skills;